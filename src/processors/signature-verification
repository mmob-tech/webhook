import { createHmac, timingSafeEqual } from "crypto";

/**
 * Verify GitHub webhook signature using HMAC-SHA256
 * @param payload - The raw request body
 * @param signature - The signature from X-Hub-Signature-256 header
 * @param secret - The webhook secret
 * @returns boolean indicating if signature is valid
 */
export const verifyGitHubSignature = (
  payload: string,
  signature: string,
  secret: string
): boolean => {
  try {
    // GitHub signatures start with "sha256="
    if (!signature.startsWith("sha256=")) {
      console.error("Invalid signature format - must start with 'sha256='");
      return false;
    }

    // Remove the "sha256=" prefix
    const githubSignature = signature.slice(7);

    // Create HMAC with the secret
    const hmac = createHmac("sha256", secret);
    hmac.update(payload, "utf8");
    const expectedSignature = hmac.digest("hex");

    // Compare signatures using timing-safe comparison
    if (githubSignature.length !== expectedSignature.length) {
      return false;
    }

    const githubBuffer = Buffer.from(githubSignature, "hex");
    const expectedBuffer = Buffer.from(expectedSignature, "hex");

    return timingSafeEqual(githubBuffer, expectedBuffer);
  } catch (error) {
    console.error("Error verifying GitHub signature:", error);
    return false;
  }
};

/**
 * Generate a GitHub webhook signature for testing
 * @param payload - The request body
 * @param secret - The webhook secret
 * @returns The signature in GitHub format (sha256=...)
 */
export const generateGitHubSignature = (
  payload: string,
  secret: string
): string => {
  const hmac = createHmac("sha256", secret);
  hmac.update(payload, "utf8");
  return `sha256=${hmac.digest("hex")}`;
};

/**
 * Validate webhook signature format
 * @param signature - The signature to validate
 * @returns boolean indicating if format is valid
 */
export const isValidSignatureFormat = (signature: string): boolean => {
  if (!signature || typeof signature !== "string") {
    return false;
  }

  // Must start with sha256=
  if (!signature.startsWith("sha256=")) {
    return false;
  }

  // Extract the hex part
  const hexPart = signature.slice(7);

  // Must be valid hex and correct length (64 characters for SHA256)
  const hexRegex = /^[a-f0-9]{64}$/i;
  return hexRegex.test(hexPart);
};